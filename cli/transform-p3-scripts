#
# Read the p3-scripts list; pull the data from github;
# transform to restructured text and place into the correct location.
#

use strict;
use File::Slurp;
use File::Temp;
use Data::Dumper;
use LWP::UserAgent;
use Pod::POM;
use Pod::POM::View::Restructured;
use File::Basename;

my %link_map  = ('P3Utils/ih_options' => ":ref:`cli-input-options`",
		 'P3Utils::ih_options' => ":ref:`cli-input-options`",
		 'P3Utils/data_options' => ":ref:`cli-data-options`",
		 'P3Utils/col_options' => ":ref:`cli-column-options`",
		 'P3Utils/delim_options' => ":ref:`cli-delimiter-options`",
		 );

my $ua = LWP::UserAgent->new;

my $url_base = "https://raw.githubusercontent.com/SEEDtk/RASTtk/master/scripts";
my $out_base = "../docroot/cli_tutorial/command_list";

open(S, "<", "p3-script-list.txt") or die "Cannot open p3-script-list.txt: $!";

my $conv = Pod::POM::View::Restructured->new({namespace => 'cli'});

my %unmapped_links;

while (my $script = <S>)
{
    chomp $script;
    print "$script\n";
    my $url = "$url_base/$script";
    my $res = $ua->get($url);
    if (!$res->is_success)
    {
	die "Error " . $res->code . " fetching $url: " . $res->content;
    }

    my $txt = $res->content;
    my $tmp = File::Temp->new();
    print $tmp $txt;
    close($tmp);

    my $base = basename($script, ".pl");
    my $out_file = "$out_base/$base.rst";

    $conv->convert_file("$tmp", $base, $out_file, { link => \&handle_link });
}

if (%unmapped_links)
{
    print STDERR "Unmapped links:\n";
    for my $l (sort keys %unmapped_links)
    {
	print STDERR "\t$l\n";
    }
}

sub handle_link
{
    my($txt) = @_;

    my $link = $link_map{$txt};

    if (defined($link))
    {
	return ('', $link);
    }
    elsif ($txt =~ /^(p3.*)\.pl$/)
    {
	return ('', ":ref:`cli::$1`");
    }
    else
    {
	$unmapped_links{$txt}++;
	return $txt;
    }
	    
}
