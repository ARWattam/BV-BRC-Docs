#
# Read the p3-scripts list; pull the data from github;
# transform to restructured text and place into the correct location.
#

use strict;
use File::Slurp;
use File::Temp;
use Data::Dumper;
use LWP::UserAgent;
use Pod::POM;
use Pod::POM::View::Restructured;
use File::Basename;

my %link_map  = ('P3Utils/ih_options' => ":ref:`cli-input-options`",
		 'P3Utils::ih_options' => ":ref:`cli-input-options`",
		 'P3Utils/data_options' => ":ref:`cli-data-options`",
		 'P3Utils/col_options' => ":ref:`cli-column-options`",
		 'P3Utils/delim_options' => ":ref:`cli-delimiter-options`",
		 );

my $ua = LWP::UserAgent->new;

my $url_top = "https://raw.githubusercontent.com/SEEDtk/RASTtk/master";
my $out_base = "../docroot/cli_tutorial/command_list";

my %unmapped_links;

#
# read the module list first to find the moduels we can link to.
#


my %modules;
open(M, "<", "p3-module-list.txt") or die "cannot read p3-module-list.txt: $!";
while (<M>)
{
    chomp;
    s/\.pm$//;
    $modules{$_} = 1;
}
close(M);

transform("p3-script-list.txt", "$url_top/scripts");
transform("p3-module-list.txt", "$url_top/lib");


if (%unmapped_links)
{
    print STDERR "Unmapped links:\n";
    for my $l (sort keys %unmapped_links)
    {
	print STDERR "\t$l\n";
    }
}

sub transform
{
    my($file, $url_base) = @_;
    open(S, "<", $file) or die "Cannot open $file $!";

    my $conv = Pod::POM::View::Restructured->new(); # {namespace => 'cli'});

    while (my $script = <S>)
    {
	chomp $script;
	print "$script\n";
	my $url = "$url_base/$script";
	my $res = $ua->get($url);
	if (!$res->is_success)
	{
	    die "Error " . $res->code . " fetching $url: " . $res->content;
	}

	my $txt = $res->content;
	my $tmp = File::Temp->new();
	print $tmp $txt;
	close($tmp);

	my $base = basename($script, ".pl", ".pm");
	my $out_file = "$out_base/$base.rst";

	open(my $fh, ">", $out_file) or die "Cannot write $out_file: $!";
	print $fh ".. _cli::$base:\n\n";

	$conv->convert_file("$tmp", $base, $fh, { link => \&handle_link });
    }
}

sub handle_link
{
    my($txt) = @_;

    my $link = $link_map{$txt};

    if (defined($link))
    {
	return ('', $link);
    }
    elsif ($modules{$txt})
    {
	return ('', ":ref:`cli::$txt`");
    }
    elsif ($txt =~ /^(p3.*)\.pl$/)
    {
	return ('', ":ref:`cli::$1`");
    }
    else
    {
	$unmapped_links{$txt}++;
	return $txt;
    }
	    
}
